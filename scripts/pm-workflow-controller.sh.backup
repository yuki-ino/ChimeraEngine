#!/bin/bash

# 🎯 PM Workflow Controller - PMがdevの完了を確認してからQAに指示するシステム

# Chimera専用作業ディレクトリを使用（プロジェクトフォルダを汚さない）
CHIMERA_WORKSPACE_DIR="${TMPDIR:-/tmp}/chimera-workspace-$$"
STATUS_DIR="$CHIMERA_WORKSPACE_DIR/status"
LOGS_DIR="$CHIMERA_WORKSPACE_DIR/logs"

# 色付きログ
log_info() { echo -e "\033[1;32m[PM-INFO]\033[0m $1"; }
log_warn() { echo -e "\033[1;33m[PM-WARN]\033[0m $1"; }
log_success() { echo -e "\033[1;34m[PM-SUCCESS]\033[0m $1"; }

# ディレクトリ作成
mkdir -p "$STATUS_DIR" "$LOGS_DIR"

# devペインの最新出力を取得
get_dev_output() {
    tmux capture-pane -t chimera-workspace:0.1 -p | tail -20
}

# devの作業状況を分析
analyze_dev_status() {
    local output=$(get_dev_output)
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] Dev Status Check:" >> "$LOGS_DIR/pm_workflow.log"
    echo "$output" >> "$LOGS_DIR/pm_workflow.log"
    echo "---" >> "$LOGS_DIR/pm_workflow.log"
    
    # 完了パターンの検出
    if echo "$output" | grep -qi "完了\|done\|finished\|実装完了\|コミット\|commit\|プッシュ\|push"; then
        echo "completed"
    elif echo "$output" | grep -qi "エラー\|error\|failed\|失敗\|例外\|exception"; then
        echo "error"
    elif echo "$output" | grep -qi "待機\|waiting\|入力\|input\|プロンプト\|>"; then
        echo "waiting"
    elif echo "$output" | grep -qi "実行中\|running\|処理中\|building\|installing"; then
        echo "working"
    else
        echo "unknown"
    fi
}

# PM向けステータス確認コマンド
check_dev_status() {
    log_info "Dev作業状況を確認中..."
    
    local status=$(analyze_dev_status)
    local output=$(get_dev_output)
    
    echo ""
    echo "📊 === Dev Status Report ==="
    echo "🕐 Time: $(date '+%H:%M:%S')"
    echo "📍 Status: $status"
    echo ""
    echo "📺 Dev画面の最新出力:"
    echo "----------------------------------------"
    echo "$output" | tail -10
    echo "----------------------------------------"
    echo ""
    
    case "$status" in
        "completed")
            log_success "✅ Dev作業完了が検出されました"
            echo "💡 次のアクション: QAに指示を送信可能"
            echo "   コマンド例: chimera send qa-functional \"実装完了しました。テストをお願いします\""
            touch "$STATUS_DIR/dev_ready_for_qa.txt"
            return 0
            ;;
        "error")
            log_warn "❌ Devでエラーが検出されました"
            echo "💡 次のアクション: Devに追加指示またはデバッグ支援"
            echo "   コマンド例: chimera send coder \"エラーが発生しています。詳細を確認してください\""
            touch "$STATUS_DIR/dev_needs_help.txt"
            return 1
            ;;
        "waiting")
            log_info "⏳ Devが入力待機中です"
            echo "💡 次のアクション: Devに追加指示または確認"
            echo "   コマンド例: chimera send coder \"作業状況を報告してください\""
            return 2
            ;;
        "working")
            log_info "🔄 Dev作業中です"
            echo "💡 次のアクション: しばらく待ってから再確認"
            echo "   コマンド例: ./pm-workflow-controller.sh wait-and-check"
            return 3
            ;;
        *)
            log_warn "❓ Dev状況が不明です"
            echo "💡 次のアクション: Devに状況確認を要求"
            echo "   コマンド例: chimera send coder \"現在の作業状況を報告してください\""
            return 4
            ;;
    esac
}

# dev完了まで待機してからQAに指示
wait_for_dev_and_instruct_qa() {
    local task_description="$1"
    local max_checks=10
    local check_interval=30
    
    log_info "Dev完了を待機してからQAに指示します..."
    echo "📋 Task: $task_description"
    echo "⏰ 最大待機時間: $(($max_checks * $check_interval))秒"
    echo ""
    
    for i in $(seq 1 $max_checks); do
        echo "🔍 Check $i/$max_checks:"
        local status=$(analyze_dev_status)
        
        case "$status" in
            "completed")
                log_success "✅ Dev作業完了を確認!"
                echo ""
                echo "📤 QAに指示を送信します..."
                chimera send qa-functional "実装完了を確認しました。「$task_description」のテストをお願いします。"
                
                echo "📝 ワークフロー記録を保存..."
                echo "$(date): $task_description -> Dev完了 -> QA指示送信" >> "$STATUS_DIR/workflow_history.txt"
                return 0
                ;;
            "error")
                log_warn "❌ Devでエラーが発生しています"
                echo "💡 PMの判断が必要です。エラー内容を確認してDevに追加指示を送信してください。"
                return 1
                ;;
            *)
                echo "   Status: $status (継続監視中...)"
                sleep $check_interval
                ;;
        esac
    done
    
    log_warn "⏰ タイムアウト: Dev完了を確認できませんでした"
    echo "💡 PMの手動確認が必要です:"
    echo "   1. chimera send coder \"作業状況を報告してください\""
    echo "   2. ./pm-workflow-controller.sh check-dev"
    return 2
}

# 全体ステータス確認
check_all_status() {
    echo "🦁 === Chimera Engine 全体ステータス ==="
    echo "🕐 Time: $(date)"
    echo ""
    
    # Dev状況
    echo "👨‍💻 === Dev Status ==="
    check_dev_status
    echo ""
    
    # QA状況確認
    echo "🧪 === QA Status ==="
    local qa_output=$(tmux capture-pane -t chimera-workspace:0.2 -p | tail -5)
    echo "QA-Functional画面:"
    echo "$qa_output"
    echo ""
    
    # ステータスファイル確認
    echo "📁 === Status Files ==="
    if [ -d "$STATUS_DIR" ]; then
        ls -la "$STATUS_DIR/"
    else
        echo "No status files found."
    fi
    echo ""
    
    # 最新ログ
    echo "📋 === Recent Communication ==="
    if [ -f "$LOGS_DIR/communication_log.txt" ]; then
        tail -5 "$LOGS_DIR/communication_log.txt"
    fi
}

# メイン処理
case "$1" in
    "check-dev"|"check")
        check_dev_status
        ;;
    "wait-and-check")
        echo "⏳ 30秒待機してからDev状況を再確認..."
        sleep 30
        check_dev_status
        ;;
    "wait-for-qa")
        wait_for_dev_and_instruct_qa "$2"
        ;;
    "status-all"|"status")
        check_all_status
        ;;
    "help"|"--help"|"")
        cat << EOF
🎯 PM Workflow Controller - PMワークフロー管理

使用方法:
  ./pm-workflow-controller.sh <command> [options]

コマンド:
  check-dev          Dev作業状況を確認
  wait-and-check     30秒待機してからDev確認
  wait-for-qa TASK   Dev完了まで待機してQAに指示
  status-all         全体ステータス確認
  help               このヘルプを表示

使用例:
  ./pm-workflow-controller.sh check-dev
  ./pm-workflow-controller.sh wait-for-qa "ログイン機能実装"
  ./pm-workflow-controller.sh status-all

💡 PMワークフロー:
  1. chimera send coder "実装指示"
  2. ./pm-workflow-controller.sh check-dev
  3. 完了確認後 -> QAに指示
  4. エラー時 -> Devに追加指示
EOF
        ;;
    *)
        echo "❌ 不明なコマンド: $1"
        echo "使用方法: ./pm-workflow-controller.sh help"
        exit 1
        ;;
esac