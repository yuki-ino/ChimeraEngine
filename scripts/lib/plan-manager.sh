#!/bin/bash
# Plan Manager - Áµ±‰∏ÄÁä∂ÊÖãÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† for Chimera Engine
# CHIMERA_PLAN.md„ÅÆÁÆ°ÁêÜ„Å®Êìç‰Ωú„ÇíÊãÖÂΩì

set -euo pipefail

# Get the directory of the script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source dependencies
source "${SCRIPT_DIR}/common.sh"
source "${SCRIPT_DIR}/config.sh"

# Constants
PLAN_FILE="${CHIMERA_PROJECT_ROOT:-$(pwd)}/CHIMERA_PLAN.md"
PLAN_TEMPLATE_FILE="${SCRIPT_DIR}/../../templates/CHIMERA_PLAN.template.md"
PLAN_LOCK_FILE="${PLAN_FILE}.lock"
PLAN_BACKUP_DIR="${CHIMERA_PROJECT_ROOT:-$(pwd)}/.chimera/backups"

# Initialize plan manager
init_plan_manager() {
    log_info "Initializing plan manager..."
    
    # Create backup directory
    safe_mkdir "${PLAN_BACKUP_DIR}"
    
    # Create initial plan if not exists
    if [[ ! -f "${PLAN_FILE}" ]]; then
        create_initial_plan
    fi
    
    log_success "Plan manager initialized"
}

# Create initial CHIMERA_PLAN.md
create_initial_plan() {
    log_info "Creating initial CHIMERA_PLAN.md..."
    
    if [[ -f "${PLAN_TEMPLATE_FILE}" ]]; then
        cp "${PLAN_TEMPLATE_FILE}" "${PLAN_FILE}"
    else
        cat > "${PLAN_FILE}" << 'EOF'
# CHIMERA_PLAN.md - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁµ±‰∏ÄÁä∂ÊÖãÁÆ°ÁêÜ

_Last Updated: $(date '+%Y-%m-%d %H:%M:%S')_

## üéØ ÁèæÂú®„ÅÆ„Çπ„Éó„É™„É≥„ÉàÁõÆÊ®ô
- [ ] „Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÂàùÊúü„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
- [ ] Âü∫Êú¨Ê©üËÉΩ„ÅÆÂÆüË£Ö

## üìã „Çø„Çπ„ÇØ„Éú„Éº„Éâ

### ÂÆüË°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ
| „Çø„Çπ„ÇØID | ÊãÖÂΩì | ÂÜÖÂÆπ | ÈñãÂßãÊôÇÂàª | ÈÄ≤Êçó | ÂÇôËÄÉ |
|---------|------|------|---------|------|------|
| - | - | - | - | - | - |

### ÂæÖÊ©ü‰∏≠„ÅÆ„Çø„Çπ„ÇØ
| „Çø„Çπ„ÇØID | ÊãÖÂΩì‰∫àÂÆö | ÂÜÖÂÆπ | ÂÑ™ÂÖàÂ∫¶ | ‰æùÂ≠ò | ÂÇôËÄÉ |
|---------|----------|------|--------|------|------|
| - | - | - | - | - | - |

### ÂÆå‰∫Ü„Çø„Çπ„ÇØ
| „Çø„Çπ„ÇØID | ÊãÖÂΩì | ÂÜÖÂÆπ | ÂÆå‰∫ÜÊôÇÂàª | ÊàêÊûúÁâ© | ÂÇôËÄÉ |
|---------|------|------|---------|--------|------|
| - | - | - | - | - | - |

## üí¨ „Ç®„Éº„Ç∏„Çß„É≥„ÉàÈñìÈÄö‰ø°„É≠„Ç∞
```
[$(date '+%H:%M')] System: CHIMERA_PLAN.md initialized
```

## üö® „Éñ„É≠„ÉÉ„Ç´„Éº„ÉªË™≤È°å
- „Å™„Åó

## üìä ÈÄ≤Êçó„É°„Éà„É™„ÇØ„Çπ
- ÂÖ®‰ΩìÈÄ≤Êçó: 0%
- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çø„Çπ„ÇØ: 0
- ÂÆå‰∫Ü„Çø„Çπ„ÇØ: 0
- „Éñ„É≠„ÉÉ„Ç´„ÉºÊï∞: 0

## üìù „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É°„É¢
- „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈñãÂßãÊó•: $(date '+%Y-%m-%d')
- ‰ΩøÁî®ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ: (Êú™ÂÆö)
- ‰∏ªË¶Å„Éû„Ç§„É´„Çπ„Éà„Éº„É≥: (Êú™ÂÆö)

---
_Auto-generated by Chimera Engine v${CHIMERA_VERSION}_
EOF
    fi
    
    log_success "Created CHIMERA_PLAN.md"
}

# Acquire lock for plan file operations
acquire_plan_lock() {
    local timeout="${1:-30}"
    local count=0
    
    while [[ -f "${PLAN_LOCK_FILE}" ]]; do
        if [[ $count -ge $timeout ]]; then
            log_error "Failed to acquire plan lock after ${timeout} seconds"
            return 1
        fi
        sleep 1
        ((count++))
    done
    
    echo "$$" > "${PLAN_LOCK_FILE}"
}

# Release plan lock
release_plan_lock() {
    rm -f "${PLAN_LOCK_FILE}"
}

# Backup current plan
backup_plan() {
    local backup_file="${PLAN_BACKUP_DIR}/CHIMERA_PLAN_$(date '+%Y%m%d_%H%M%S').md"
    cp "${PLAN_FILE}" "${backup_file}"
    log_debug "Plan backed up to: ${backup_file}"
}

# Add task to plan
add_task() {
    local task_id="$1"
    local agent="$2"
    local description="$3"
    local priority="${4:-medium}"
    local dependencies="${5:-none}"
    
    acquire_plan_lock || return 1
    
    # Backup before modification
    backup_plan
    
    # Add task to waiting tasks section
    local timestamp=$(date '+%H:%M')
    local new_row="| ${task_id} | ${agent} | ${description} | ${priority} | ${dependencies} | - |"
    
    # Use temporary file for safe editing
    local temp_file=$(mktemp)
    cp "${PLAN_FILE}" "${temp_file}"
    
    # Find and update waiting tasks table
    awk -v new_row="${new_row}" '
        /^### ÂæÖÊ©ü‰∏≠„ÅÆ„Çø„Çπ„ÇØ/ { in_section=1 }
        /^###/ && in_section && !/^### ÂæÖÊ©ü‰∏≠„ÅÆ„Çø„Çπ„ÇØ/ { in_section=0 }
        /^\| - \| - \| - \| - \| - \| - \|/ && in_section {
            print new_row
            printed=1
        }
        { print }
        END {
            if (!printed && in_section) {
                print new_row
            }
        }
    ' "${temp_file}" > "${PLAN_FILE}"
    
    rm -f "${temp_file}"
    
    # Add communication log entry
    add_communication_log "System" "all" "„Çø„Çπ„ÇØËøΩÂä†: ${task_id} - ${description}"
    
    release_plan_lock
    
    log_success "Task ${task_id} added to plan"
}

# Update task status
update_task_status() {
    local task_id="$1"
    local new_status="$2"  # waiting, active, completed
    local agent="${3:-}"
    local progress="${4:-}"
    
    acquire_plan_lock || return 1
    
    backup_plan
    
    local temp_file=$(mktemp)
    cp "${PLAN_FILE}" "${temp_file}"
    
    case "${new_status}" in
        "active")
            # Move from waiting to active
            move_task_to_active "${task_id}" "${agent}" "${progress}"
            ;;
        "completed")
            # Move from active to completed
            move_task_to_completed "${task_id}" "${agent}"
            ;;
        *)
            log_error "Invalid task status: ${new_status}"
            release_plan_lock
            return 1
            ;;
    esac
    
    release_plan_lock
}

# Move task from waiting to active
move_task_to_active() {
    local task_id="$1"
    local agent="$2"
    local progress="${3:-0%}"
    local start_time=$(date '+%H:%M')
    
    # Extract task info and move between sections
    local temp_file=$(mktemp)
    
    awk -v task_id="${task_id}" -v agent="${agent}" -v start_time="${start_time}" -v progress="${progress}" '
        BEGIN { found=0; OFS="|" }
        /^### ÂæÖÊ©ü‰∏≠„ÅÆ„Çø„Çπ„ÇØ/ { in_waiting=1; in_active=0; in_completed=0 }
        /^### ÂÆüË°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ/ { in_waiting=0; in_active=1; in_completed=0 }
        /^### ÂÆå‰∫Ü„Çø„Çπ„ÇØ/ { in_waiting=0; in_active=0; in_completed=1 }
        
        # Capture task from waiting section
        in_waiting && $0 ~ "\\| " task_id " \\|" {
            split($0, fields, "|")
            task_desc = fields[3]
            task_priority = fields[4]
            found=1
            next  # Skip this line (remove from waiting)
        }
        
        # Add to active section
        in_active && /^\| - \| - \| - \| - \| - \| - \|/ && found {
            print "| " task_id " | " agent " |" task_desc "| " start_time " | " progress " | - |"
            found=0
        }
        
        { print }
    ' "${PLAN_FILE}" > "${temp_file}"
    
    mv "${temp_file}" "${PLAN_FILE}"
}

# Move task from active to completed
move_task_to_completed() {
    local task_id="$1"
    local agent="$2"
    local complete_time=$(date '+%H:%M')
    
    # Similar implementation to move_task_to_active
    # Extract from active, add to completed
    local temp_file=$(mktemp)
    
    awk -v task_id="${task_id}" -v complete_time="${complete_time}" '
        BEGIN { found=0; OFS="|" }
        /^### ÂÆüË°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ/ { in_active=1; in_completed=0 }
        /^### ÂÆå‰∫Ü„Çø„Çπ„ÇØ/ { in_active=0; in_completed=1 }
        
        # Capture task from active section
        in_active && $0 ~ "\\| " task_id " \\|" {
            split($0, fields, "|")
            task_agent = fields[2]
            task_desc = fields[3]
            found=1
            next  # Skip this line (remove from active)
        }
        
        # Add to completed section
        in_completed && /^\| - \| - \| - \| - \| - \| - \|/ && found {
            print "| " task_id " |" task_agent "|" task_desc "| " complete_time " | - | - |"
            found=0
        }
        
        { print }
    ' "${PLAN_FILE}" > "${temp_file}"
    
    mv "${temp_file}" "${PLAN_FILE}"
}

# Add communication log entry
add_communication_log() {
    local from_agent="$1"
    local to_agent="$2"
    local message="$3"
    local timestamp=$(date '+%H:%M')
    
    local temp_file=$(mktemp)
    
    # Find communication log section and add entry
    awk -v entry="[${timestamp}] ${from_agent} ‚Üí ${to_agent}: ${message}" '
        /^## üí¨ „Ç®„Éº„Ç∏„Çß„É≥„ÉàÈñìÈÄö‰ø°„É≠„Ç∞/ { in_comm=1 }
        /^```$/ && in_comm && !in_code { in_code=1; print; print entry; next }
        /^```$/ && in_comm && in_code { in_comm=0; in_code=0 }
        { print }
    ' "${PLAN_FILE}" > "${temp_file}"
    
    mv "${temp_file}" "${PLAN_FILE}"
}

# Get current task status
get_task_status() {
    local task_id="$1"
    
    if grep -q "^| ${task_id} |" "${PLAN_FILE}"; then
        if grep -A 100 "### ÂÆüË°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ" "${PLAN_FILE}" | grep -B 100 "^###" | grep -q "^| ${task_id} |"; then
            echo "active"
        elif grep -A 100 "### ÂæÖÊ©ü‰∏≠„ÅÆ„Çø„Çπ„ÇØ" "${PLAN_FILE}" | grep -B 100 "^###" | grep -q "^| ${task_id} |"; then
            echo "waiting"
        elif grep -A 100 "### ÂÆå‰∫Ü„Çø„Çπ„ÇØ" "${PLAN_FILE}" | grep -B 100 "^###" | grep -q "^| ${task_id} |"; then
            echo "completed"
        else
            echo "unknown"
        fi
    else
        echo "not_found"
    fi
}

# Update progress metrics
update_metrics() {
    local total_tasks=$(grep -E "^\| T[0-9]+ \|" "${PLAN_FILE}" | wc -l)
    local completed_tasks=$(grep -A 100 "### ÂÆå‰∫Ü„Çø„Çπ„ÇØ" "${PLAN_FILE}" | grep -E "^\| T[0-9]+ \|" | wc -l)
    local active_tasks=$(grep -A 100 "### ÂÆüË°å‰∏≠„ÅÆ„Çø„Çπ„ÇØ" "${PLAN_FILE}" | grep -B 100 "^###" | grep -E "^\| T[0-9]+ \|" | wc -l)
    local blockers=$(grep -A 100 "## üö® „Éñ„É≠„ÉÉ„Ç´„Éº„ÉªË™≤È°å" "${PLAN_FILE}" | grep -B 100 "^##" | grep -E "^\- \[" | wc -l)
    
    local progress=0
    if [[ $total_tasks -gt 0 ]]; then
        progress=$((completed_tasks * 100 / total_tasks))
    fi
    
    # Update metrics section
    local temp_file=$(mktemp)
    
    awk -v progress="${progress}" -v active="${active_tasks}" -v completed="${completed_tasks}" -v blockers="${blockers}" '
        /^- ÂÖ®‰ΩìÈÄ≤Êçó:/ { print "- ÂÖ®‰ΩìÈÄ≤Êçó: " progress "%"; next }
        /^- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çø„Çπ„ÇØ:/ { print "- „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Çø„Çπ„ÇØ: " active; next }
        /^- ÂÆå‰∫Ü„Çø„Çπ„ÇØ:/ { print "- ÂÆå‰∫Ü„Çø„Çπ„ÇØ: " completed; next }
        /^- „Éñ„É≠„ÉÉ„Ç´„ÉºÊï∞:/ { print "- „Éñ„É≠„ÉÉ„Ç´„ÉºÊï∞: " blockers; next }
        { print }
    ' "${PLAN_FILE}" > "${temp_file}"
    
    mv "${temp_file}" "${PLAN_FILE}"
}

# Watch plan file for changes (for agents to monitor)
watch_plan() {
    local agent="$1"
    local interval="${2:-10}"  # Default 10 seconds
    
    log_info "Agent ${agent} starting plan watch (interval: ${interval}s)..."
    
    local last_modified=""
    
    while true; do
        if [[ -f "${PLAN_FILE}" ]]; then
            local current_modified=$(stat -f "%m" "${PLAN_FILE}" 2>/dev/null || stat -c "%Y" "${PLAN_FILE}" 2>/dev/null)
            
            if [[ "${current_modified}" != "${last_modified}" ]]; then
                log_info "Plan updated, notifying agent ${agent}"
                # Trigger agent to re-read plan
                echo "PLAN_UPDATED" > "${CHIMERA_WORKSPACE_DIR}/status/${agent}_trigger"
                last_modified="${current_modified}"
            fi
        fi
        
        sleep "${interval}"
    done
}

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        "init")
            init_plan_manager
            ;;
        "add-task")
            add_task "$2" "$3" "$4" "${5:-medium}" "${6:-none}"
            ;;
        "update-status")
            update_task_status "$2" "$3" "${4:-}" "${5:-}"
            ;;
        "get-status")
            get_task_status "$2"
            ;;
        "add-log")
            add_communication_log "$2" "$3" "$4"
            ;;
        "update-metrics")
            update_metrics
            ;;
        "watch")
            watch_plan "$2" "${3:-10}"
            ;;
        *)
            echo "Usage: $0 {init|add-task|update-status|get-status|add-log|update-metrics|watch}"
            exit 1
            ;;
    esac
fi