#!/bin/bash

# ЁЯУБ Chimera Engine - шинхоЪуГнуГ╝уГАуГ╝
# YAMLшинхоЪуГХуВбуВдуГлуВТшкнуБ┐ш╛╝уБ┐уАБчТ░хвГхдЙцХ░уБиуБЧуБжхИйчФихПпшГ╜уБлуБЩуВЛ

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# шинхоЪуГХуВбуВдуГлуГСуВ╣
DEFAULT_CONFIG_FILE="$PROJECT_ROOT/config/chimera.yaml"
USER_CONFIG_FILE="${CHIMERA_CONFIG:-$HOME/.chimera/config.yaml}"

# шинхоЪуВнуГгуГГуВ╖уГе
declare -A CONFIG_CACHE=()
CONFIG_LOADED=0

# YAMLшзгцЮРщЦвцХ░я╝Иjq/yqуБМхИйчФиуБзуБНуБкуБДха┤хРИуБоуГХуВйуГ╝уГлуГРуГГуВпя╝Й
parse_yaml_simple() {
    local yaml_file="$1"
    local prefix="${2:-}"
    
    # уВ│уГбуГ│уГИуБичй║шбМуВТщЩдхО╗
    grep -v '^\s*#' "$yaml_file" | grep -v '^\s*$' | while IFS= read -r line; do
        # уВдуГ│уГЗуГ│уГИуГмуГЩуГлцдЬхЗ║
        local indent=$(echo "$line" | sed 's/[^ ].*//' | wc -c)
        indent=$((indent - 1))
        
        # уВнуГ╝уГРуГкуГеуГ╝уГЪуВвуБоцК╜хЗ║
        if echo "$line" | grep -q ':'; then
            local key=$(echo "$line" | sed 's/:.*//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
            local value=$(echo "$line" | sed 's/[^:]*: *//' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
            
            # хАдуБохЗжчРЖ
            if [[ "$value" =~ ^\".*\"$ ]]; then
                value=$(echo "$value" | sed 's/^"//' | sed 's/"$//')
            elif [[ "$value" =~ ^\'.*\'$ ]]; then
                value=$(echo "$value" | sed "s/^'//" | sed "s/'$//")
            fi
            
            # уГЧуГмуГХуВгуГГуВпуВ╣ф╗ШуБНуВнуГ╝чФЯцИР
            local full_key="${prefix}${key}"
            echo "${full_key}=${value}"
        fi
    done
}

# YAMLшинхоЪшкнуБ┐ш╛╝уБ┐я╝ИyqуВТф╜┐чФия╝Й
load_config_with_yq() {
    local config_file="$1"
    
    if ! command -v yq &>/dev/null; then
        return 1
    fi
    
    # YAML to JSONхдЙцПЫуБЧуБжjqуБзхЗжчРЖ
    yq eval -o=json "$config_file" | jq -r '
        def flatten(prefix):
            . as $in |
            if type == "object" then
                reduce keys[] as $key ({}; 
                    . + ($in[$key] | flatten(prefix + $key + "_"))
                )
            elif type == "array" then
                reduce range(0; length) as $i ({};
                    . + (.[$i] | flatten(prefix + ($i | tostring) + "_"))
                )
            else
                {(prefix[:-1]): .}
            end;
        flatten("") | to_entries[] | "\(.key)=\(.value)"
    ' 2>/dev/null
}

# YAMLшинхоЪшкнуБ┐ш╛╝уБ┐я╝ИjqуВТф╜┐чФия╝Й
load_config_with_jq() {
    local config_file="$1"
    
    if ! command -v jq &>/dev/null; then
        return 1
    fi
    
    # YAMLуВТJSONуБлхдЙцПЫя╝Ич░бцШУчЙИя╝Й
    # ц│ицДП: хоМхЕиуБкYAMLтЖТJSONхдЙцПЫуБзуБпуБВуВКуБ╛уБЫуВУ
    local temp_json=$(mktemp)
    
    # ч░бцШУYAMLтЖТJSONхдЙцПЫ
    awk '
    BEGIN {
        print "{"
        indent[0] = 0
        level = 0
    }
    /^[[:space:]]*#/ { next }  # уВ│уГбуГ│уГИшбМуВТуВ╣уВнуГГуГЧ
    /^[[:space:]]*$/ { next }  # чй║шбМуВТуВ╣уВнуГГуГЧ
    {
        # уВдуГ│уГЗуГ│уГИуГмуГЩуГлшиИчоЧ
        match($0, /^[[:space:]]*/);
        current_indent = RLENGTH
        
        # уВнуГ╝уГ╗хАдуБохИЖщЫв
        if (match($0, /^[[:space:]]*([^:]+):[[:space:]]*(.*)/)) {
            key = substr($0, RSTART + current_indent, RLENGTH - current_indent)
            gsub(/^[[:space:]]+|[[:space:]]+$/, "", key)
            
            value_start = RSTART + RLENGTH
            value = substr($0, value_start)
            gsub(/^[[:space:]]+|[[:space:]]+$/, "", value)
            
            # JSONх╜вх╝ПуБзхЗ║хКЫ
            if (value == "") {
                printf "%s\"%s\": {\n", indent_str(current_indent), key
            } else {
                printf "%s\"%s\": \"%s\",\n", indent_str(current_indent), key, value
            }
        }
    }
    function indent_str(level) {
        return sprintf("%*s", level, "")
    }
    END {
        print "}"
    }
    ' "$config_file" > "$temp_json" 2>/dev/null
    
    # JSONуБЛуВЙшинхоЪхАдцК╜хЗ║
    if jq -r 'paths(scalars) as $p | $p + [getpath($p)] | join("_")' "$temp_json" 2>/dev/null; then
        rm -f "$temp_json"
        return 0
    fi
    
    rm -f "$temp_json"
    return 1
}

# шинхоЪуГХуВбуВдуГлшкнуБ┐ш╛╝уБ┐
load_config() {
    local config_file="${1:-$DEFAULT_CONFIG_FILE}"
    
    if [[ ! -f "$config_file" ]]; then
        echo "шнжхСК: шинхоЪуГХуВбуВдуГлуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ: $config_file" >&2
        return 1
    fi
    
    local config_data=""
    
    # шдЗцХ░уБоцЦ╣ц│ХуБзшинхоЪшкнуБ┐ш╛╝уБ┐уВТшйжшбМ
    if command -v yq &>/dev/null; then
        config_data=$(load_config_with_yq "$config_file")
    elif command -v jq &>/dev/null; then
        config_data=$(load_config_with_jq "$config_file")
    else
        # уГХуВйуГ╝уГлуГРуГГуВп: ч░бцШУшзгцЮР
        config_data=$(parse_yaml_simple "$config_file")
    fi
    
    if [[ -z "$config_data" ]]; then
        echo "уВиуГйуГ╝: шинхоЪуГХуВбуВдуГлуБошзгцЮРуБлхд▒цХЧуБЧуБ╛уБЧуБЯ: $config_file" >&2
        return 1
    fi
    
    # шинхоЪуВТуВнуГгуГГуВ╖уГеуБлф┐ЭхнШ
    while IFS='=' read -r key value; do
        if [[ -n "$key" ]]; then
            CONFIG_CACHE["$key"]="$value"
        fi
    done <<< "$config_data"
    
    CONFIG_LOADED=1
    
    if [[ "${DEBUG:-0}" == "1" ]]; then
        echo "шинхоЪуГХуВбуВдуГлшкнуБ┐ш╛╝уБ┐хоМф║Ж: $config_file" >&2
        echo "шкнуБ┐ш╛╝уБ╛уВМуБЯшинхоЪщаЕчЫоцХ░: ${#CONFIG_CACHE[@]}" >&2
    fi
    
    return 0
}

# шинхоЪхАдхПЦх╛Ч
get_config_value() {
    local key="$1"
    local default="${2:-}"
    
    # шинхоЪуБМшкнуБ┐ш╛╝уБ╛уВМуБжуБДуБкуБДха┤хРИуБпшкнуБ┐ш╛╝уБ┐
    if [[ $CONFIG_LOADED -eq 0 ]]; then
        load_config || return 1
    fi
    
    # уВнуГгуГГуВ╖уГеуБЛуВЙхПЦх╛Ч
    if [[ -n "${CONFIG_CACHE[$key]:-}" ]]; then
        echo "${CONFIG_CACHE[$key]}"
        return 0
    fi
    
    # ф╗гцЫ┐уВнуГ╝х╜вх╝ПуВТшйжшбМ
    local alt_key
    alt_key=$(echo "$key" | tr '.' '_' | tr '-' '_')
    if [[ -n "${CONFIG_CACHE[$alt_key]:-}" ]]; then
        echo "${CONFIG_CACHE[$alt_key]}"
        return 0
    fi
    
    # уГЗуГХуВйуГлуГИхАдуВТш┐ФуБЩ
    echo "$default"
    return 0
}

# шинхоЪхАдшинхоЪя╝ИуГйуГ│уВ┐уВдуГахдЙцЫ┤я╝Й
set_config_value() {
    local key="$1"
    local value="$2"
    
    CONFIG_CACHE["$key"]="$value"
    
    if [[ "${DEBUG:-0}" == "1" ]]; then
        echo "шинхоЪхАдхдЙцЫ┤: $key = $value" >&2
    fi
}

# уВиуГ╝уВ╕уВзуГ│уГИшинхоЪхПЦх╛Ч
get_agent_config() {
    local agent="$1"
    local property="$2"
    local mode="${3:-current}"  # current mode
    
    local key="agents_${mode}_${agent}_${property}"
    get_config_value "$key"
}

# tmuxшинхоЪхПЦх╛Ч
get_tmux_config() {
    local property="$1"
    local key="tmux_$property"
    get_config_value "$key"
}

# уГпуГ╝уВпуГХуГнуГ╝шинхоЪхПЦх╛Ч
get_workflow_config() {
    local property="$1"
    local key="workflow_$property"
    get_config_value "$key"
}

# уВ┐уВдуГауВвуВжуГИшинхоЪхПЦх╛Ч
get_timeout_config() {
    local operation="${1:-default}"
    local key="timeouts_operations_$operation"
    local default_timeout=$(get_config_value "timeouts_default" "30")
    
    get_config_value "$key" "$default_timeout"
}

# уГнуВ░шинхоЪхПЦх╛Ч
get_logging_config() {
    local property="$1"
    local key="logging_$property"
    get_config_value "$key"
}

# чТ░хвГхдЙцХ░уБ╕уБошинхоЪуВиуВпуВ╣уГЭуГ╝уГИ
export_config_to_env() {
    local prefix="${1:-CHIMERA_}"
    
    if [[ $CONFIG_LOADED -eq 0 ]]; then
        load_config || return 1
    fi
    
    for key in "${!CONFIG_CACHE[@]}"; do
        local env_key="${prefix}$(echo "$key" | tr '[:lower:]' '[:upper:]' | tr '.' '_' | tr '-' '_')"
        local value="${CONFIG_CACHE[$key]}"
        
        # чТ░хвГхдЙцХ░уБиуБЧуБжшинхоЪ
        export "$env_key"="$value"
        
        if [[ "${DEBUG:-0}" == "1" ]]; then
            echo "чТ░хвГхдЙцХ░шинхоЪ: $env_key = $value" >&2
        fi
    done
}

# шинхоЪуГХуВбуВдуГлуБоуГРуГкуГЗуГ╝уВ╖уГзуГ│
validate_config() {
    local config_file="${1:-$DEFAULT_CONFIG_FILE}"
    
    if [[ ! -f "$config_file" ]]; then
        echo "уВиуГйуГ╝: шинхоЪуГХуВбуВдуГлуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ: $config_file" >&2
        return 1
    fi
    
    # YAMLцзЛцЦЗуГБуВзуГГуВп
    if command -v yq &>/dev/null; then
        if ! yq eval '.' "$config_file" >/dev/null 2>&1; then
            echo "уВиуГйуГ╝: YAMLцзЛцЦЗуВиуГйуГ╝ in $config_file" >&2
            return 1
        fi
    elif command -v python3 &>/dev/null; then
        if ! python3 -c "import yaml; yaml.safe_load(open('$config_file'))" 2>/dev/null; then
            echo "шнжхСК: YAMLцзЛцЦЗуБохХПщбМуБохПпшГ╜цАзуБМуБВуВКуБ╛уБЩ: $config_file" >&2
        fi
    fi
    
    # х┐ЕщаИшинхоЪщаЕчЫоуГБуВзуГГуВп
    local required_keys=(
        "chimera_version"
        "chimera_session_name"
        "agents_current"
        "workspace_base_dir"
    )
    
    load_config "$config_file" || return 1
    
    for key in "${required_keys[@]}"; do
        if [[ -z "$(get_config_value "$key")" ]]; then
            echo "уВиуГйуГ╝: х┐ЕщаИшинхоЪщаЕчЫоуБМшжЛуБдуБЛуВКуБ╛уБЫуВУ: $key" >&2
            return 1
        fi
    done
    
    echo "шинхоЪуГХуВбуВдуГлуБоуГРуГкуГЗуГ╝уВ╖уГзуГ│цИРхКЯ: $config_file" >&2
    return 0
}

# шинхоЪуБоуГЮуГ╝уВ╕я╝ИшдЗцХ░шинхоЪуГХуВбуВдуГлхп╛х┐Ья╝Й
merge_configs() {
    local primary_config="$1"
    local secondary_config="$2"
    
    # уГЧуГйуВдуГЮуГкшинхоЪшкнуБ┐ш╛╝уБ┐
    load_config "$primary_config" || return 1
    
    # уВ╗уВлуГ│уГАуГкшинхоЪуБМхнШхЬиуБЩуВЛха┤хРИуБпуГЮуГ╝уВ╕
    if [[ -f "$secondary_config" ]]; then
        local temp_cache=()
        
        # чП╛хЬиуБоуВнуГгуГГуВ╖уГеуВТуГРуГГуВпуВвуГГуГЧ
        for key in "${!CONFIG_CACHE[@]}"; do
            temp_cache["$key"]="${CONFIG_CACHE[$key]}"
        done
        
        # уВ╗уВлуГ│уГАуГкшинхоЪшкнуБ┐ш╛╝уБ┐я╝Иф╕КцЫ╕уБНя╝Й
        CONFIG_LOADED=0
        load_config "$secondary_config"
        
        # уГЧуГйуВдуГЮуГкшинхоЪуБзф╕Нш╢│щГихИЖуВТшгЬхоМ
        for key in "${!temp_cache[@]}"; do
            if [[ -z "${CONFIG_CACHE[$key]:-}" ]]; then
                CONFIG_CACHE["$key"]="${temp_cache[$key]}"
            fi
        done
        
        if [[ "${DEBUG:-0}" == "1" ]]; then
            echo "шинхоЪуГЮуГ╝уВ╕хоМф║Ж: $primary_config + $secondary_config" >&2
        fi
    fi
    
    return 0
}

# шинхоЪуБоуГАуГ│уГЧя╝ИуГЗуГРуГГуВ░чФия╝Й
dump_config() {
    local output_file="${1:-}"
    
    if [[ $CONFIG_LOADED -eq 0 ]]; then
        load_config || return 1
    fi
    
    local output=""
    output+="# Chimera Engine шинхоЪуГАуГ│уГЧ\n"
    output+="# чФЯцИРцЧецЩВ: $(date)\n"
    output+="# ч╖ПшинхоЪщаЕчЫоцХ░: ${#CONFIG_CACHE[@]}\n\n"
    
    # уВвуГлуГХуВбуГЩуГГуГИщаЖуБзуВ╜уГ╝уГИ
    for key in $(printf '%s\n' "${!CONFIG_CACHE[@]}" | sort); do
        output+="$key=${CONFIG_CACHE[$key]}\n"
    done
    
    if [[ -n "$output_file" ]]; then
        echo -e "$output" > "$output_file"
        echo "шинхоЪуГАуГ│уГЧхЗ║хКЫ: $output_file" >&2
    else
        echo -e "$output"
    fi
}

# шинхоЪуГкуГнуГ╝уГЙ
reload_config() {
    local config_file="${1:-$DEFAULT_CONFIG_FILE}"
    
    # уВнуГгуГГуВ╖уГеуВпуГкуВв
    CONFIG_CACHE=()
    CONFIG_LOADED=0
    
    # хЖНшкнуБ┐ш╛╝уБ┐
    load_config "$config_file"
    
    echo "шинхоЪуГкуГнуГ╝уГЙхоМф║Ж: $config_file" >&2
}

# шинхоЪхАдцдЬч┤в
search_config() {
    local pattern="$1"
    
    if [[ $CONFIG_LOADED -eq 0 ]]; then
        load_config || return 1
    fi
    
    echo "шинхоЪцдЬч┤вч╡РцЮЬ: '$pattern'"
    echo "========================="
    
    for key in "${!CONFIG_CACHE[@]}"; do
        if [[ "$key" =~ $pattern ]] || [[ "${CONFIG_CACHE[$key]}" =~ $pattern ]]; then
            echo "$key = ${CONFIG_CACHE[$key]}"
        fi
    done
}

# хИЭцЬЯхМЦцЩВуБлшЗкхЛХшкнуБ┐ш╛╝уБ┐
if [[ "${CHIMERA_AUTO_LOAD_CONFIG:-1}" == "1" ]]; then
    # уГжуГ╝уВ╢уГ╝шинхоЪуГХуВбуВдуГлуБМхнШхЬиуБЩуВЛха┤хРИуБпуГЮуГ╝уВ╕
    if [[ -f "$USER_CONFIG_FILE" ]]; then
        merge_configs "$DEFAULT_CONFIG_FILE" "$USER_CONFIG_FILE" 2>/dev/null || \
        load_config "$DEFAULT_CONFIG_FILE" 2>/dev/null || true
    else
        load_config "$DEFAULT_CONFIG_FILE" 2>/dev/null || true
    fi
fi